#!/usr/bin/env bash
#
# This script is used for the [Nginx
# buildpack](github.com/Scalingo/nginx-buildpack/). Please refer to this page
# (https://www.notion.so/scalingooriginal/New-Nginx-Version-936b92e173a74f5ab0cd59e5155a4880)
# on how to use it.
#

set -e

basedir="$( cd -P "$( dirname "$0" )" && pwd )"
source "$basedir/../bin/common.sh"
source "$basedir/../config/versions.sh"
source "$basedir/lib/utils"
source "$basedir/lib/s3.lib.sh"

# Binding between modsecurity and nginx (since modsecurity can be used as standalone or with apache for instance)
MODSECURITY_VERSION=${MODSECURITY_VERSION:-$default_modsecurity_version}
MODSECURITY_NGINX_VERSION="v${MODSECURITY_NGINX_VERSION:-$default_modsecurity_nginx_version}"
MODSECURITY_NGINX_DIR="modsecurity-nginx-${MODSECURITY_NGINX_VERSION}"
MODSECURITY_NGINX_TARBALL="${MODSECURITY_NGINX_DIR}.tar.gz"
MODSECURITY_NGINX_URL="https://github.com/SpiderLabs/ModSecurity-nginx/releases/download/${MODSECURITY_NGINX_VERSION}/${MODSECURITY_NGINX_TARBALL}"

nginx_version="${1:-$default_nginx_version}"
zlib_version="$default_zlib_version"

validate_env

which aws >/dev/null || apt-get install awscli

export PATH=${basedir}/../vendor/bin:$PATH

if [ -z "$nginx_version" ]; then
  echo "Usage: $0 <version>" >&2
  exit $E_ARG_MISSING
fi

if [ -z "$NGINX_PCRE_VERSION" ]; then
  # From https://sourceforge.net/projects/pcre/files/pcre/
  NGINX_PCRE_VERSION=8.45
fi

pcre_version="$NGINX_PCRE_VERSION"

tempdir=$(mktmpdir nginx)
cd $tempdir

status "Downloading dependency PCRE ${pcre_version}"

curl --location --remote-name --silent "https://sourceforge.net/projects/pcre/files/pcre/${pcre_version}/pcre-${pcre_version}.tar.gz"
tar -xzf "pcre-${pcre_version}.tar.gz"

status "Downloading dependency zlib ${zlib_version}"

zlib_filename="zlib-${zlib_version}.tar.gz"
s3_download "$S3_BUCKET" "${STACK}/zlib/${zlib_filename}" "$zlib_filename" > /dev/null
tar -xzf "$zlib_filename"

status "Downloading Nginx ${nginx_version}"

curl --location --remote-name --silent "https://nginx.org/download/nginx-${nginx_version}.tar.gz"
tar -xzf "nginx-${nginx_version}.tar.gz"

nginx_configure_args="--prefix=/app/vendor/nginx --with-http_ssl_module --with-http_auth_request_module --with-pcre=../pcre-${pcre_version} --with-zlib=../zlib-${zlib_version} --with-http_realip_module"
if [ "$NO_MODSECURITY_MODULE" != "true" ] ; then
  status "Downloading ModSecurity ${MODSECURITY_VERSION}"
  modsecurity_filename="modsecurity-${MODSECURITY_VERSION}.tgz"
  s3_download "$S3_BUCKET" "${STACK}/package/${modsecurity_filename}" "$modsecurity_filename" > /dev/null
  modsecurity_dir="/app/vendor/modsecurity"
  mkdir -p "$modsecurity_dir"
  tar --extract --ungzip --file "$modsecurity_filename" --directory "$modsecurity_dir"
  # Required for Nginx compilation with modsecurity-nginx module
  export MODSECURITY_INC="${modsecurity_dir}/include"
  export MODSECURITY_LIB="${modsecurity_dir}/lib"

  status "Installing modsecurity-nginx ${MODSECURITY_NGINX_VERSION}"
  curl --remote-name --location --silent "$MODSECURITY_NGINX_URL"
  tar --extract --ungzip --file "$MODSECURITY_NGINX_TARBALL"
  nginx_config_dir="/app/vendor/nginx/etc/nginx"
  mkdir -p "${nginx_config_dir}/modules" "${nginx_config_dir}/modsec"
  nginx_configure_args="$nginx_configure_args --add-dynamic-module=../${MODSECURITY_NGINX_DIR}"
fi

status "Compile Nginx ${nginx_version}"

pushd nginx-${nginx_version} >/dev/null && \
  ./configure $nginx_configure_args && \
  make > /dev/null && make install && \
  popd > /dev/null
rc=$?
if [[ $rc -ne 0 ]]; then
  error "Fail to compile Nginx"
fi

status "Uploading package to S3 ${S3_URL}/package/nginx-${nginx_version}.tgz"
mkdir package
nginx_filepath="package/nginx-${nginx_version}.tgz"
pushd /app/vendor/nginx >/dev/null
tar zcvf "${tempdir}/${nginx_filepath}" .
popd >/dev/null


if ! s3_upload "${S3_BUCKET}" "${nginx_filepath}" "${STACK}/${nginx_filepath}"; then
	echo "Unable to upload nginx package to Object Storage!" >&2
	exit 2
fi

if ! "${basedir}/manifest" "nginx"; then
	echo "Unable to generate/upload manifest for nginx." >&2
	echo "Something's wrong and needs to be fixed." >&2
	exit 3
fi

if ! "${basedir}/package-checksum" "nginx-${nginx_version}"; then
	echo "Unable to generate checksums for nginx." >&2
	echo "Something's wrong and needs to be fixed." >&2
	exit 4
fi

status "Done building Nginx package!"
